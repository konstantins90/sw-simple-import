{% extends 'components/layout.html.twig' %} {% block content %}
<div class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1 class="m-0">Shopware Simple Importer</h1>
      </div>
    </div>
  </div>
</div>

<section class="content">
  <div class="container-fluid">
    <form action="/upload" class="dropzone" id="file-dropzone">
      <div class="dz-message">
        Ziehen Sie die Dateien hierher oder klicken Sie, um sie auszuwählen.
      </div>
    </form>
  </div>
</section>

<section x-data="fileManager()" id="files" class="content mt-5">
  <div class="container-fluid">
    <h3>Dateien</h3>
    <table class="table">
      <thead>
        <tr>
          <th scope="col">ID</th>
          <th scope="col">Dateiname</th>
          <th scope="col">Path</th>
          <th scope="col">Status</th>
          <th scope="col">Konfig Name</th>
          <th scope="col">Erstellt Am</th>
          <th scope="col">Action</th>
        </tr>
      </thead>
      <tbody class="files">
        <template x-for="(file, index) in files" :key="file.id">
          <tr>
            <td x-text="file.id"></td>
            <td x-text="file.name"></td>
            <td x-text="file.path"></td>
            <td x-text="file.status"></td>
            <td>
              <select
                x-show="file.status === 'idle'"
                x-model="file.config_id"
                class="form-select"
                :name="'files[' + index + '][config_name]'"
                @change="updateFileConfig(file.id, file.config_id)">
                <option value="" disabled selected>Konfig wählen</option>
                <template x-for="config in configs" :key="config.id">
                  <option :value="config.id" x-text="config.name"></option>
                </template>
              </select>
              <span
                x-show="file.status !== 'idle'"
                x-text="file.config_name"></span>
            </td>
            <td x-text="file.created_at"></td>
            <td>
              <button @click="deleteFile(file.id)" class="btn btn-danger">
                Löschen
              </button>

              <button
                x-show="file.status === 'idle'"
                @click="updateStatus(file.id, 'pending', index)"
                class="btn btn-success">
                Bestätigen
              </button>

              <button
                x-show="file.status === 'pending'"
                @click="updateStatus(file.id, 'idle', index)"
                class="btn btn-warning">
                Entladen
              </button>
            </td>
          </tr>
        </template>
      </tbody>
    </table>
  </div>
</section>
<section x-data="fileManager()">
  <div
    x-show="isModalOpen"
    x-cloak
    class="modal fade"
    id="modal-file"
    tabindex="-1"
    aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content" style="margin: 20rem auto">
        <div class="modal-header">
          <h5 class="modal-title">Wählen Sie eine Konfiguration</h5>
          <button
            type="button"
            class="btn-close"
            @click="closeModal()"
            aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <label for="configSelect">Konfiguration:</label>
          <select
            id="configSelect"
            x-model="selectedConfig"
            class="form-select">
            <template x-for="config in configs" :key="config.id">
              <option :value="config.id" x-text="config.name"></option>
            </template>
          </select>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" @click="closeModal()">
            Abbrechen
          </button>
          <button
            id="create-config-btn"
            class="btn btn-primary"
            @click="createConfigFromFile()">
            Konfiguration für diesen File erstellen
          </button>

          <button type="button" class="btn btn-primary" @click="submitFile()">
            Hochladen
          </button>
        </div>
      </div>
    </div>
  </div>
</section>
<script>
  function fileManager() {
    return {
      files: [],
      configs: [],
      selectedFile: null,
      selectedConfig: "",
      isModalOpen: false,
      init() {
        const fileManagerInstance = this;

        const fetchData = async () => {
          try {
            const filesResponse = await fetch("/files");
            this.files = await filesResponse.json();

            const configsResponse = await fetch("/config-files/all");
            this.configs = await configsResponse.json();

            this.$nextTick(() => {
              this.files.forEach((file, index) => {
                const selectedConfig = document.querySelector(
                  `select[name='files[${index}][config_name]']`
                );
                if (selectedConfig) {
                  //console.log(selectedConfig);
                  //   console.log(file);
                  selectedConfig.value = file.config_id;
                } else {
                  //console.log("qwe");
                }
              });
            });
          } catch (error) {
            console.error("Error fetching data:", error);
          }
        };

        fetchData();

        Dropzone.options.fileDropzone = {
          autoProcessQueue: false,
          init: function () {
            const dropzoneInstance = this;
            this.on("addedfile", function (file) {
              fileManagerInstance.selectedFile = file;
              //   console.log(fileManagerInstance.selectedFile);
              document.getElementById("modal-file").style.display = "block";
              document.getElementById("modal-file").style.opacity = 1;
              this.isModalOpen = true;
            });
          },
        };
      },
      deleteFile(id) {
        if (confirm("Möchten Sie diese Datei wirklich löschen?")) {
          fetch(`/files/delete/${id}`, {method: "DELETE"})
            .then(
              () => (this.files = this.files.filter((file) => file.id !== id))
            )
            .catch(() => alert("Ein Fehler ist aufgetreten."));
        }
      },
      submitFile() {
        if (!this.selectedFile || !this.selectedConfig) {
          alert("Bitte wählen Sie eine Datei und eine Konfiguration aus. 1");
          return;
        }

        const formData = new FormData();
        formData.append("file", this.selectedFile);
        formData.append("config_id", this.selectedConfig);

        console.log(formData);

        fetch("/upload", {
          method: "POST",
          body: formData,
        })
          .then((response) => {
            console.log('response', response);
            if (!response.ok) {
              throw new Error(`Fehler: ${response.status} ${response.statusText}`);
            }
            return response.json();
          })
          .then((data) => {
            console.log('data',data);
            if (data.success) {
              alert("Datei erfolgreich hochgeladen.");
              this.closeModal();
            } else {
              alert(`Fehler: ${data.error || "Unbekannter Fehler"}`);
            }
          })
          .catch((error) => {
            console.error("Upload failed:", error);
            alert("Fehler beim Hochladen der Datei.");
          });
      },
      closeModal() {
        this.isModalOpen = false;
        this.selectedFile = null;

        const dropzoneInstance = Dropzone.forElement("#file-dropzone");
        dropzoneInstance.removeAllFiles(true); // Clears all files from Dropzone

        document.getElementById("modal-file").style.display = "none";
        document.getElementById("modal-file").style.opacity = 0;
      },
      createConfigFromFile() {
        if (!this.selectedFile) {
          alert("Bitte wählen Sie eine Datei und eine Konfiguration aus. 2");
          return;
        }

        const formData = new FormData();
        formData.append("file", this.selectedFile);
        formData.append("config_id", 1);

        fetch("/upload", {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.status === "success") {
              const {path, file_id} = data;
              //   alert("Datei erfolgreich hochgeladen.");
              console.log("Datei erfolgreich hochgeladen.");
              window.location.href = `/config-files/create?filePath=${encodeURIComponent(
                path
              )}&fileId=${file_id}`;
            } else {
              alert(data.message || "File upload failed.");
            }
          })
          .catch(() => alert("Fehler beim Hochladen der Datei."));
      },
      updateFileConfig(fileId, configId) {
        fetch(`/files/update-config/${fileId}`, {
          method: "PUT",
          headers: {"Content-Type": "application/json"},
          body: JSON.stringify({config_id: configId}),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.status === "success") {
              console.log("Konfiguration erfolgreich aktualisiert.");
            } else {
              alert(
                `Fehler beim Aktualisieren der Konfiguration: ${data.message}`
              );
            }
          })
          .catch(() => alert("Ein Fehler ist aufgetreten."));
      },
      updateStatus(fileId, newStatus, index) {
        fetch(`/files/update-status/${fileId}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({status: newStatus}),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.status === "success") {
              alert("Status erfolgreich aktualisiert.");
              fetch("/files")
                .then((response) => response.json())
                .then((data) => (this.files = data));
              fetch("/config-files/all")
                .then((response) => response.json())
                .then((data) => {
                  this.configs = data;
                  //   if (data.length > 0) {
                  //     this.selectedConfig = data[0].id;
                  //   }
                });
            } else {
              alert(`Fehler: ${data.message}`);
            }
          })
          .catch(() => alert("Ein Fehler ist aufgetreten."));
      },
    };
  }
</script>
{% endblock %}
