{% extends 'components/layout.html.twig' %} {% block content %}
<div class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1 class="m-0">Konfiguration Liste</h1>
      </div>
    </div>
    {% if session.error %}
    <div class="alert alert-danger mt-5">
      {{ session.error }}
    </div>
    {% endif %}
  </div>
</div>

<section
  id="edit"
  class="content mt-5"
  x-data="configManager({ id: {{ configFile.getId() }}, fields: [] })">
  <div class="container-fluid">
    <form action="/config-files/edit/{{ configFile.getId() }}" method="POST">
      <div class="form-group">
        <label for="name">Name</label>
        <input
          type="text"
          id="name"
          name="name"
          class="form-control"
          value="{{ configFile.getName() }}"
          required />
      </div>

      <div class="form-group">
        <label for="marge">Marge</label>
        <input
          type="number"
          id="marge"
          name="marge"
          class="form-control"
          value="{{ configFile.getMarge() }}"
          required />
      </div>

      <div class="form-group">
        <label for="prefix">SKU Prefix</label>
        <input
          type="text"
          id="prefix"
          name="prefix"
          class="form-control"
          value="{{ configFile.getPrefix() }}"
          placeholder="preorder-" />
      </div>

      <div class="form-group mt-4">
        <h3>Felder</h3>
        <template x-for="(field, key) in fields " :key="key">
          <div class="field-group row mb-3">
            <!-- <label class="col-3" x-text="key"></label> -->
            <div class="col-3">
              <input
                type="text"
                class="form-control"
                :value="key"
                placeholder="key"
                x-bind:value="key"
                :name="'fields[' + key + '][name]'" />
            </div>
            <div class="col-2">
              <select
                class="form-select"
                x-model="field.type"
                :name="'fields[' + key + '][type]'">
                <option value="default" selected>Standardwert</option>
                <option value="csv">CSV Feld</option>
              </select>
            </div>
            <div class="col-2">
              <input
                type="text"
                :name="'fields[' + key + '][default]'"
                class="form-control"
                placeholder="Standardwert"
                x-show="field.type === 'default'"
                x-bind:value="field.default" />

              <input
                type="text"
                :name="'fields[' + key + '][csvField]'"
                class="form-control"
                placeholder="CSV-Feld"
                x-show="field.type === 'csv'"
                x-bind:value="field.csv" />
            </div>
            <div class="col-2">
              <button
                type="button"
                class="btn btn-danger"
                @click="removeField(key)">
                Remove
              </button>
            </div>
          </div>
        </template>
      </div>

      <div class="form-group">
        <button type="button" class="btn btn-secondary" @click="addField">
          Add New Field
        </button>
      </div>

      <!-- <div class="form-group">
        <label for="mapping">Mapping</label>
        <textarea id="mapping" name="mapping" class="form-control" rows="10">{{
          configFile.getMapping()
        }}</textarea>
      </div> -->

      <button type="submit" class="btn btn-primary">Speichern</button>
      <a href="/config-files" class="btn btn-secondary">Abbrechen</a>
    </form>
  </div>
</section>
<script>
  // function configManager(initialFields) {
  //     return {
  //         fields: initialFields,
  //         init() {
  //             console.log('DEMO');
  //             console.log(fields);
  //         }
  //     };
  // }
  function configManager(initialData) {
    return {
      fields: [],
      id: initialData.id,
      init() {
        fetch(`/config-files/fields/${this.id}`)
          .then((response) => response.json())
          .then((data) => {
            this.fields = data;
            console.log(this.fields);
          })
          .catch(() => {
            alert("Fehler beim Laden der Felder.");
          });
      },
      addField() {
        const newFieldName = `Field ${Object.keys(this.fields).length + 1}`;
        this.fields[newFieldName] = {
          type: "default",
          csv: null,
          default: "",
        };
      },
      removeField(fieldName) {
        delete this.fields[fieldName];
      },
    };
  }
</script>
{% endblock %}
