{% extends 'components/layout.html.twig' %} {% block content %}
<div class="content-header">
  <div class="container-fluid">
    <div class="row mb-2">
      <div class="col-sm-6">
        <h1 class="m-0">Konfiguration bearbeiten</h1>
      </div>
    </div>
    {% if session.error %}
    <div class="alert alert-danger mt-5">
      {{ session.error }}
    </div>
    {% endif %}
  </div>
</div>

<section
  id="edit"
  class="content mt-5"
  x-data="configManager({ id: {{ configFile.getId() }}, fields: [] })">
  <div class="container-fluid">
    <form action="/config-files/edit/{{ configFile.getId() }}" method="POST">
      <div class="form-group">
        <label for="name">Name</label>
        <input
          type="text"
          id="name"
          name="name"
          class="form-control"
          value="{{ configFile.getName() }}"
          required />
      </div>

      <div class="form-group">
        <label for="csvUpload">CSV Hochladen</label>
        <input
          type="file"
          id="csvUpload"
          name="csvUpload"
          class="form-control"
          @change="handleCsvUpload" />
      </div>

      <div class="form-group">
        <label for="marge">Marge</label>
        <input
          type="number"
          id="marge"
          name="marge"
          class="form-control"
          value="{{ configFile.getMarge() }}"
          required />
      </div>

      <div class="form-group">
        <label for="prefix">SKU Prefix</label>
        <input
          type="text"
          id="prefix"
          name="prefix"
          class="form-control"
          value="{{ configFile.getPrefix() }}"
          placeholder="preorder-" />
      </div>

      <div class="form-group mt-4">
        <h3>Felder</h3>
        <template x-for="(field, key) in fields" :key="key">
          <div class="field-group row mb-3">
            <div class="col-3">
              <input
                type="text"
                class="form-control"
                x-bind:value="key"
                :name="'fields[' + key + '][name]'" />
            </div>
            <div class="col-2">
              <select
                class="form-select"
                x-model="field.type"
                :name="'fields[' + key + '][type]'">
                <option value="default" :selected="field.type === 'default'">
                  Standardwert
                </option>
                <option value="csv" :selected="field.type === 'csv'">
                  CSV Feld
                </option>
              </select>
            </div>
            <div class="col-2">
              <input
                type="text"
                :name="'fields[' + key + '][default]'"
                class="form-control"
                placeholder="Standardwert"
                x-show="field.type === 'default'"
                x-bind:value="field.default" />
              <select
                class="form-select"
                :name="'fields[' + key + '][csvField]'"
                class="form-control"
                x-show="field.type === 'csv'"
                :required="field.type === 'csv'"
                x-bind:value="field.csv">
                <template x-for="header in csvHeaders" :key="key + '-' + index">
                  <option
                    :value="header"
                    x-text="header"
                  >
                  
                  </option>
                </template>
              </select>
            </div>
            <div class="col-2">
              <button
                type="button"
                class="btn btn-danger"
                @click="removeField(key)">
                Löschen
              </button>
            </div>
          </div>
        </template>
      </div>

      <input type="hidden" id="csvHeaders" name="csv_headers" />

      <div class="form-group">
        <button type="button" class="btn btn-secondary" @click="addField">
          Neues Feld hinzufügen
        </button>
      </div>

      <button type="submit" class="btn btn-primary">Speichern</button>
      <a href="/config-files" class="btn btn-secondary">Abbrechen</a>
    </form>
  </div>
</section>

<script>
  function configManager(initialData) {
    return {
      fields: [],
      mandatoryFields: [],
      csvHeaders: [],
      id: initialData.id,
      init() {
        fetch(`/config-files/fields/${this.id}`)
          .then((response) => response.json())
          .then((data) => {
            this.extractProperties(data);
            this.fields = data;
            console.log('Fields', this.fields);
            this.$nextTick(() => {
              this.assignCsvHeadersToFields();
            });
          })
          .catch(() => {
            alert("Fehler beim Laden der Felder 1.");
          });
        fetch(`/config-files/fields`)
          .then((response) => response.json())
          .then((data) => {
            this.mandatoryFields = data;
          })
          .catch(() => {
            alert("Fehler beim Laden der Felder 2.");
          });
        fetch(`/config-files/csv-headers/${this.id}`)
          .then((response) => response.json())
          .then((data) => {
            this.csvHeaders = data;
            document.getElementById("csvHeaders").value = JSON.stringify(
              this.csvHeaders
            );
          })
          .catch(() => {
            alert("Fehler beim Laden der CSV-Header.");
          });
      },
      extractProperties(data) {
        if (data.properties) {
          for (const propName in data.properties) {
            if (data.properties.hasOwnProperty(propName)) {
              const prop = data.properties[propName];
              if (propName) {
                data[propName] = prop;
              }
            }
          }
          delete data.properties;
        }
      },
      assignCsvHeadersToFields() {
        //this.csvHeaders = []; // Clear previous csv headers
        let index = 0;

        for (const [key, value] of Object.entries(this.fields)) {
          // if (value["type"] === "csv") {
          //   this.csvHeaders.push(value["csv"]);
          // }

          this.$nextTick(() => {
            const selectElement = document.querySelector(
              `select[name='fields[${key}][csvField]']`
            );

            if (selectElement) {
              selectElement.value =
                value["type"] === "csv" ? value["csv"] : this.csvHeaders[index];
              console.log(selectElement.value);
            } else {
              console.log(`Select element for field '${key}' not found.`);
            }

            index++;
          });
        }
        console.log(this.csvHeaders);
      },
      handleCsvUpload(event) {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            this.csvHeaders = [];
            const csvContent = e.target.result;
            const rows = csvContent.split("\n");
            this.csvHeaders = rows[0].split(";");
            document.getElementById("csvHeaders").value = JSON.stringify(
              this.csvHeaders
            );
            this.fields = this.mandatoryHeaders.map((header, index) => ({
              name: header,
              type: index < this.csvHeaders.length ? "csv" : "default",
              csvField:
                index < this.csvHeaders.length
                  ? this.csvHeaders[index]
                  : this.csvHeaders[index % this.csvHeaders.length],
              isReadOnly: false,
            }));
            this.$nextTick(() => {
              this.fields.forEach((field, index) => {
                const selectElement = document.querySelector(
                  `select[name='fields[${index}][csvField]']`
                );
                if (selectElement && index < this.csvHeaders.length) {
                  selectElement.value = this.csvHeaders[index];
                }
              });
            });
          };
          reader.readAsText(file);
        }
      },
      addField() {
        const newFieldName = `Field ${Object.keys(this.fields).length + 1}`;
        this.fields[newFieldName] = {
          type: "default",
          csv: null,
          default: "",
        };
      },
      removeField(fieldName) {
        delete this.fields[fieldName];
      },
    };
  }
</script>
{% endblock %}
