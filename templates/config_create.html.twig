{% extends 'components/layout.html.twig' %} {% block content%}
<div class="content-header">
  <div class="container-fluid">
    <h1 class="m-0">Neue Konfiguration</h1>
  </div>
</div>

<section id="edit" class="content mt-5" x-data="configManager()">
  <div class="container-fluid">
    <form id="configForm" action="/config-files/create" method="POST">
      <div class="form-group">
        <label for="name">Name</label>
        <input
          type="text"
          id="name"
          name="name"
          class="form-control"
          required />
      </div>

      {% if filePath %}
      <div class="form-group">
        <label for="file">Dateipfad:</label>
        <input
          type="text"
          name="file"
          id="file"
          class="form-control"
          value="{{ filePath }}"
          readonly />
      </div>
      {% else %}
      <div class="form-group">
        <label for="csvUpload">CSV Hochladen</label>
        <input
          type="file"
          id="csvUpload"
          name="csvUpload"
          class="form-control"
          @change="handleCsvUpload" />
      </div>
      {% endif %}

      <!-- TAKE DEFAULT MARGIN IF NONE -->
      <div class="form-group">
        <label for="marge">Marge</label>
        <input type="number" id="marge" name="marge" class="form-control" />
      </div>

      <div class="form-group">
        <label for="prefix">SKU Prefix</label>
        <input
          type="text"
          id="prefix"
          name="prefix"
          class="form-control"
          placeholder="preorder-" />
      </div>

      <div class="form-group mt-4">
        <h3>Felder</h3>
        <template x-for="(field, index) in fields" :key="index">
          <div class="field-group row mb-3">
            <div class="col-3">
              <input
                type="text"
                class="form-control"
                placeholder="Field Name"
                x-model="field.name"
                :name="'fields[' + index + '][name]'" />
            </div>
            <div class="col-2">
              <select
                class="form-select"
                x-model="field.type"
                :name="'fields[' + index + '][type]'">
                <option value="default">Standardwert</option>
                <option value="csv" selected>CSV Feld</option>
              </select>
            </div>
            <div class="col-3">
              <select
                class="form-select"
                x-model="field.csvField"
                :name="'fields[' + index + '][csvField]'"
                x-show="field.type === 'csv'"
                :required="field.type === 'csv'">
                <template
                  x-for="(header, headerIndex) in csvHeaders"
                  :key="header">
                  <option :value="header" x-text="header"></option>
                </template>
              </select>
              <input
                type="text"
                class="form-control"
                x-model="field.defaultValue"
                :name="'fields[' + index + '][default]'"
                placeholder="Standardwert"
                x-show="field.type === 'default'" />
            </div>
            <div class="col-2">
              <button
                type="button"
                class="btn btn-danger"
                @click="removeField(index)">
                Löschen
              </button>
            </div>
          </div>
        </template>
      </div>

      <div class="form-group">
        <button type="button" class="btn btn-secondary" @click="addField">
          Neues Feld hinzufügen
        </button>
      </div>

      <input
        type="hidden"
        name="fileId"
        value="{{ fileId|default('') }}"
        :required="{{ fileId }}" />
      <button type="submit" class="btn btn-primary">Speichern</button>
    </form>
  </div>
</section>

<script>
  function configManager() {
    return {
      fields: [],
      csvHeaders: [],
      mandatoryHeaders: [],
      filePath: "{{ filePath|default('') }}",
      fileId: "{{ fileId|default('') }}",
      init() {
        fetch("/config-files/fields")
          .then((response) => response.json())
          .then((data) => {
            this.mandatoryHeaders = data;
          })
          .catch(() => {
            alert("Fehler beim Laden der Felder.");
          });
        if (this.filePath) {
          this.processCsvFromFilePath(this.filePath);
        } else {
          console.log("ERROR WITH FILEPATH INIT: " + this.filePath);
        }
      },
      processCsvFromFilePath(path) {
        fetch(`/files/${this.fileId}`)
          .then((response) => response.json())
          .then((data) => {
            if (data.status === "success") {
              const csvContent = data.fileContent;
              const rows = csvContent.split("\n");
              this.csvHeaders = rows[0].split(";");
              this.fields = this.mandatoryHeaders.map((header, index) => ({
                name: header,
                type: index < this.csvHeaders.length ? "csv" : "default",
                csvField:
                  index < this.csvHeaders.length
                    ? this.csvHeaders[index]
                    : this.csvHeaders[index % this.csvHeaders.length],
                isReadOnly: false,
              }));
              this.$nextTick(() => {
                this.fields.forEach((field, index) => {
                  const selectElement = document.querySelector(
                    `select[name='fields[${index}][csvField]']`
                  );
                  if (selectElement && index < this.csvHeaders.length) {
                    selectElement.value = this.csvHeaders[index];
                  }
                });
              });
            } else {
              console.error("Error fetching file:", data.message);
            }
          })
          .catch((error) => {
            console.error("Error fetching file:", error);
          });
      },
      handleCsvUpload(event) {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            const csvContent = e.target.result;
            const rows = csvContent.split("\n");
            this.csvHeaders = rows[0].split(";");
            this.fields = this.mandatoryHeaders.map((header, index) => ({
              name: header,
              type: index < this.csvHeaders.length ? "csv" : "default",
              csvField:
                index < this.csvHeaders.length
                  ? this.csvHeaders[index]
                  : this.csvHeaders[index % this.csvHeaders.length],
              isReadOnly: false,
            }));
            this.$nextTick(() => {
              this.fields.forEach((field, index) => {
                const selectElement = document.querySelector(
                  `select[name='fields[${index}][csvField]']`
                );
                if (selectElement && index < this.csvHeaders.length) {
                  selectElement.value = this.csvHeaders[index];
                }
              });
            });
          };
          reader.readAsText(file);
        }
      },
      addField() {
        this.fields.push({
          name: "",
          type: "default",
          csvField: "",
          isReadOnly: false,
        });
      },
      removeField(index) {
        this.fields.splice(index, 1);
      },
    };
  }
</script>
{% endblock %}
